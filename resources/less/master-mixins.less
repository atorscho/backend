// Load variables and functions
@import "master-variables";

// ----------------------------

// MIXINS
// ===================================
// Position & Layout & Utilities

// Center-align a block level element
.center-block() {
	display:      block;
	margin-left:  auto;
	margin-right: auto;
}

// Clearfix
.clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Gradient Overlay
.gradient-overlay() {
	.square(100%);
	content:  '';
	display:  block;
	left:     0;
	position: absolute;
	top:      0;
	z-index:  -1;
}

// Input Block
.input-block() {
	.box-sizing();
	display: block;
	width:   100%;
}

// Opacity
.opacity(@opacity) {
	@opperc: @opacity * 100;
	filter:          ~"alpha(opacity=@{opperc})";
	-webkit-opacity: @opacity;
	-khtml-opacity:  @opacity;
	-moz-opacity:    @opacity;
	opacity:         @opacity;
}

// Resizable textareas
.resizable(@direction: both) {
	// Options: horizontal, vertical, both
	resize:   @direction;
	// Safari fix
	overflow: auto;
}

// Retina Ready Images
.img-retina(@file1x; @file2x; @width1x; @height1x) {
	background-image: url("@{file1x}");

	@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (   min--moz-device-pixel-ratio: 2), only screen and (     -o-min-device-pixel-ratio: 2/1), only screen and (        min-device-pixel-ratio: 2), only screen and (                min-resolution: 192dpi), only screen and (                min-resolution: 2dppx) {
		background-image:                                   url("@{file2x}");
		background-size:                                    @width1x @height1x;
	}
}

// Sizing shortcuts
.size(@width; @height) {
	width:  @width;
	height: @height;
}

.square(@size) {
	.size(@size; @size);
}

// Text overflow
// Requires inline-block or block for proper styling
.text-overflow() {
	overflow:      hidden;
	text-overflow: ellipsis;
	white-space:   nowrap;
}

// Border-Radius
.border-radius(@radius: @borderRadiusBase) {
	-webkit-border-radius: @radius;
	-moz-border-radius:    @radius;
	border-radius:         @radius;
}

.border-radius-top(@radius: @borderRadiusBase) {
	.border-radius-top-right(@radius);
	.border-radius-top-left(@radius);
}

.border-radius-bottom(@radius: @borderRadiusBase) {
	.border-radius-bottom-right(@radius);
	.border-radius-bottom-left(@radius);
}

.border-radius-right(@radius: @borderRadiusBase) {
	.border-radius-bottom-right(@radius);
	.border-radius-top-right(@radius);
}

.border-radius-left(@radius: @borderRadiusBase) {
	.border-radius-bottom-left(@radius);
	.border-radius-top-left(@radius);
}

.border-radius-top-left(@radius: @borderRadiusBase) {
	-webkit-border-top-left-radius: @radius;
	-moz-border-radius-topleft:     @radius;
	border-top-left-radius:         @radius;
}

.border-radius-top-right(@radius: @borderRadiusBase) {
	-webkit-border-top-right-radius: @radius;
	-moz-border-radius-topright:     @radius;
	border-top-right-radius:         @radius;
}

.border-radius-bottom-right(@radius: @borderRadiusBase) {
	-webkit-border-bottom-right-radius: @radius;
	-moz-border-radius-bottomright:     @radius;
	border-bottom-right-radius:         @radius;
}

.border-radius-bottom-left(@radius: @borderRadiusBase) {
	-webkit-border-bottom-left-radius: @radius;
	-moz-border-radius-bottomleft:     @radius;
	border-bottom-left-radius:         @radius;
}

// Gradient
.vertical(@startColor, @endColor, @startPercent: 0%, @endPercent: 100%) {
	background: @startColor;
	background: -moz-linear-gradient(top, @startColor @startPercent, @endColor @endPercent);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(@startPercent, @startColor), color-stop(@endPercent, @endColor));
	background: -webkit-linear-gradient(top, @startColor @startPercent, @endColor @endPercent);
	background: -o-linear-gradient(top, @startColor @startPercent, @endColor @endPercent);
	background: -ms-linear-gradient(top, @startColor @startPercent, @endColor @endPercent);
	background: linear-gradient(to bottom, @startColor @startPercent, @endColor @endPercent);
	filter:     e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor), argb(@endColor)));
}

.horizontal(@startColor, @endColor, @startPercent: 0%, @endPercent: 100%) {
	background: @startColor;
	background: -moz-linear-gradient(left, @startColor @startPercent, @endColor @endPercent);
	background: -webkit-gradient(linear, left top, right top, color-stop(@startPercent, @startColor), color-stop(@endPercent, @endColor));
	background: -webkit-linear-gradient(left, @startColor @startPercent, @endColor @endPercent);
	background: -o-linear-gradient(left, @startColor @startPercent, @endColor @endPercent);
	background: -ms-linear-gradient(left, @startColor @startPercent, @endColor @endPercent);
	background: linear-gradient(to right, @startColor @startPercent, @endColor @endPercent);
	filter:     e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor), argb(@endColor)));
}

.diagonal-leftUp(@startColor, @endColor, @startPercent: 0%, @endPercent: 100%) {
	background: @startColor;
	background: -moz-linear-gradient(-45deg, @startColor @startPercent, @endColor @endPercent);
	background: -webkit-gradient(linear, left top, right bottom, color-stop(@startPercent, @startColor), color-stop(@endPercent, @endColor));
	background: -webkit-linear-gradient(-45deg, @startColor @startPercent, @endColor @endPercent);
	background: -o-linear-gradient(-45deg, @startColor @startPercent, @endColor @endPercent);
	background: -ms-linear-gradient(-45deg, @startColor @startPercent, @endColor @endPercent);
	background: linear-gradient(135deg, @startColor @startPercent, @endColor @endPercent);
	filter:     e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor), argb(@endColor)));
}

.diagonal-leftBottom(@startColor, @endColor, @startPercent: 0%, @endPercent: 100%) {
	background: @startColor;
	background: -moz-linear-gradient(45deg, @startColor @startPercent, @endColor @endPercent);
	background: -webkit-gradient(linear, left bottom, right top, color-stop(@startPercent, @startColor), color-stop(@endPercent, @endColor));
	background: -webkit-linear-gradient(45deg, @startColor @startPercent, @endColor @endPercent);
	background: -o-linear-gradient(45deg, @startColor @startPercent, @endColor @endPercent);
	background: -ms-linear-gradient(45deg, @startColor @startPercent, @endColor @endPercent);
	background: linear-gradient(45deg, @startColor @startPercent, @endColor @endPercent);
	filter:     e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor), argb(@endColor)));
}

.radial(@startColor, @endColor, @startPercent: 0%, @endPercent: 100%) {
	background: @startColor;
	background: -moz-radial-gradient(center, ellipse cover, @startColor @startPercent, @endColor @endPercent);
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(@startPercent, @startColor), color-stop(@endPercent, @endColor));
	background: -webkit-radial-gradient(center, ellipse cover, @startColor @startPercent, @endColor @endPercent);
	background: -o-radial-gradient(center, ellipse cover, @startColor @startPercent, @endColor @endPercent);
	background: -ms-radial-gradient(center, ellipse cover, @startColor @startPercent, @endColor @endPercent);
	background: radial-gradient(ellipse at center, @startColor @startPercent, @endColor @endPercent);
	filter:     e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor), argb(@endColor)));
}

// Animation
.animation(@animation) {
	-webkit-animation: @animation;
	-moz-animation:    @animation;
	animation:         @animation;
}

// Background Clip
.background-clip(@clip) {
	-webkit-background-clip: @clip;
	-moz-background-clip:    @clip;
	background-clip:         @clip;
}

// Background Size
.background-size(@size) {
	-webkit-background-size: @size;
	-moz-background-size:    @size;
	-o-background-size:      @size;
	background-size:         @size;
}

// Box Sizing
.box-sizing(@boxModel: border-box) {
	-webkit-box-sizing: @boxModel;
	-moz-box-sizing:    @boxModel;
	box-sizing:         @boxModel;
}

// Box Shadow
.box-shadow(@shadow) {
	-webkit-box-shadow: @shadow;
	-moz-box-shadow:    @shadow;
	box-shadow:         @shadow;
}

// Columns
.content-columns(@width; @count; @gap) {
	-webkit-column-width: @width;
	-moz-column-width:    @width;
	column-width:         @width;
	-webkit-column-count: @count;
	-moz-column-count:    @count;
	column-count:         @count;
	-webkit-column-gap:   @gap;
	-moz-column-gap:      @gap;
	column-gap:           @gap;
}

// Perspective & Origin
.perspective(@perspective) {
	-webkit-perspective: @perspective;
	-moz-perspective:    @perspective;
	perspective:         @perspective;
}

// Transform
.transform(...) {
	-webkit-transform: @arguments;
	-moz-transform:    @arguments;
	-ms-transform:     @arguments;
	-o-transform:      @arguments;
	transform:         @arguments;
}

// Transition
.transition(@params) {
	-webkit-transition: @params;
	-khtml-transition:  @params;
	-moz-transition:    @params;
	-o-transition:      @params;
	transition:         @params;
}

// FLEX

// Flex Display
// Applied to: parent flex containers.
// @display: flex | inline-flex
.display(@display: flex) {
	display: -webkit-box; // OLD: < iOS 6, Safari 3.1-6
	display: -moz-box; // OLD: < Firefox 19 (buggy but mostly works)
	display: ~"-moz-@{display}"; // FIREFOX
	display: ~"-ms-@{display}box"; // TWEENER: IE 10
	display: ~"-ms-@{display}"; // TWEENER: IE 11
	display: ~"-webkit-@{display}"; // NEW: Chrome
	display: @display; // NEW: Opera 12.1, Firefox 20+
}

// Flex Flow Direction
// Applies to: parent flex containers.
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) {
	-webkit-flex-direction: @direction;
	-moz-flex-direction:    @direction;
	-ms-flex-direction:     @direction;
	flex-direction:         @direction;
}

// Flex Line Wrapping
// Applies to: parent flex containers.
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) {
	-webkit-flex-wrap: @wrap;
	-moz-flex-wrap:    @wrap;
	-ms-flex-wrap:     @wrap;
	flex-wrap:         @wrap;
}

// Flex Direction and Wrap (shorthand for `flex-direction` and `flex-wrap`)
// Applies to: parent flex containers.
// <flex-direction> <flex-wrap>
.flex-flow(@flow: row nowrap) {
	-webkit-flex-flow: @flow;
	-moz-flex-flow:    @flow;
	-ms-flex-flow:     @flow;
	flex-flow:         @flow;
}

// Axis Alignment
// This defines the alignment along the main axis.
// Applies to: parent flex containers.
// flex-start | flex-end | center | space-between | space-around
.justify-content(@justify: flex-start) {
	-webkit-justify-content: @justify;
	-moz-justify-content:    @justify;
	-ms-justify-content:     @justify;
	justify-content:         @justify;
}

// Packing Flex Lines
// This aligns a flex container's lines within when there is extra space in the cross-axis,
// similar to how justify-content aligns individual items within the main-axis.
// Applies to: multi-line parent flex containers.
// flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@align: stretch) {
	-webkit-align-content: @align;
	-moz-align-content:    @align;
	-ms-align-content:     @align;
	align-content:         @align;
}

// Cross-axis Alignment
// This defines the default behaviour for how flex items are laid out along the cross axis on the current line.
// Think of it as the justify-content version for the cross-axis.
// Applies to: parent flex containers.
// flex-start | flex-end | center | baseline | stretch
.align-items(@align: stretch) {
	-webkit-align-items: @align;
	-moz-align-items:    @align;
	-ms-align-items:     @align;
	align-items:         @align;
}

// Cross-axis Alignment
// This allows the default alignment or the one specified by align-items
// to be overridden for individual flex items.
// Applies to: child flex items.
// auto | flex-start | flex-end | center | baseline | stretch
.align-self(@align: auto) {
	-webkit-align-self: @align;
	-moz-align-self:    @align;
	-ms-align-self:     @align;
	align-self:         @align;
}

// Display Order
// Applies to: child flex items.
// <integer>
.order(@order: 0) {
	-webkit-order: @order;
	-moz-order:    @order;
	-ms-order:     @order;
	order:         @order;
}

// Flex (shorthand for `flex-grow`, `flex-shrink` and `flex-basis`)
// Applies to: child flex items.
// Second and third parameters are optional.
// <integer>, <integer>, auto/length | none
// Default: 0 1 auto.
.flex(@columns: initial) {
	-webkit-flex: @columns;
	-moz-flex:    @columns;
	-ms-flex:     @columns;
	flex:         @columns;
}

// Flex Grow
// Applies to: child flex items.
// <integer> (0)
.flex-grow(@grow: 0) {
	-webkit-flex-grow: @grow;
	-moz-flex-grow:    @grow;
	-ms-flex-grow:     @grow;
	flex-grow:         @grow;
}

// Flex Shrink
// Applies to: child flex items.
// <integer> (1)
.flex-shrink(@shrink: 1) {
	-webkit-flex-shrink: @shrink;
	-moz-flex-shrink:    @shrink;
	-ms-flex-shrink:     @shrink;
	flex-shrink:         @shrink;
}

// Flex Basis
// Applies to: child flex items.
// <length> | auto (auto)
.flex-basis(@length: auto) {
	-webkit-flex-basis: @length;
	-moz-flex-basis:    @length;
	-ms-flex-basis:     @length;
	flex-basis:         @length;
}

// VARIANTS
// ===================================
.variants-alert(@color) {
	border-color: @color;

	&:before {
		.square(0);
		border-color: @color transparent transparent transparent;
		border-style: solid;
		border-width: 20px 20px 0 0;
		content:      '';
		left:         0;
		position:     absolute;
		top:          0;
	}

	.close {
		.border-radius();
		.opacity(1);
		color: @color;
		padding: 1px 5px 0 6px;
		transition: background 250ms ease;

		&:hover {
			background: fade(#000, 10%);
		}
	}
}

.variants-btn(@bg, @text: #fff, @border: darken(@bg, 10%)) {
	.vertical(@bg, darken(@bg, 3%));
	border-color: @border;
	box-shadow: inset 0 1px fade(#fff, 15%);
	color: @text;
	text-shadow: 0 1px darken(@border, 5%);

	&:hover, &:focus {
		.vertical(lighten(@bg, 2%), darken(@bg, 3%));
	}
	&:active, &.active {
		box-shadow: inset 0 1px 3px fade(#000, 15%);
	}
}
